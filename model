import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
import seaborn as sb

#A. Load the data from the file winequality.csv.
winequality=pd.read_csv('winequality.csv')
print(winequality.head())

#B. Standardize all variables other than Quality.
X=winequality.iloc[:,0:11]
y=winequality.iloc[:,11]

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
X=pd.DataFrame(scaler.fit_transform(X),columns = X.columns)
print(X.head())

#C. Partition the dataset
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.2,random_state=2020,stratify=y)
X_trainA, X_trainB, y_trainA, y_trainB = train_test_split(X_train, y_train, test_size=0.25, random_state=2020, stratify=y_train)

#D. Build a KNN classification model to predict Quality based on all the remaining numeric variables.
#E. Iterate on K ranging from 1 to 30. Plot the accuracy for the train A and train B datasets.
from sklearn.neighbors import KNeighborsClassifier


neighbors=range(1,31)
accuracyTrainA=[]
accuracyTrainB=[]

for k in neighbors:
    KNN=KNeighborsClassifier(n_neighbors=k)
    KNN.fit(X_trainA,y_trainA)
    accuracy1=KNN.score(X_trainA,y_trainA)
    accuracyTrainA.append(accuracy1)
    accuracy2 = KNN.score(X_trainB, y_trainB)
    accuracyTrainB.append(accuracy2)

plt.plot(neighbors,accuracyTrainA,label='TrainingA Accuracy')
plt.plot(neighbors,accuracyTrainB,label='TrainingB Accuracy')
plt.xticks(neighbors)
plt.legend()
plt.title('KNN: Varying Number of Neighbors')
plt.xlabel('k= Number of Neighbors')
plt.ylabel('Accuracy')
plt.show()

#F. Which value of k produced the best accuracy in the train A and train B data sets?
#choose 27 for best value of k

#G. Generate predictions for the test partition with the chosen value of k. Print the confusion matrix of the actual vs predicted wine quality.
from sklearn import metrics
from sklearn.metrics import plot_confusion_matrix

model=KNeighborsClassifier(n_neighbors=27)
model.fit(X_trainA,y_trainA)
y_pred = model.predict(X_test)
confusionmatrix = metrics.confusion_matrix(y_test, y_pred)
print(confusionmatrix)
plot_confusion_matrix(model, X_test, y_test)
plt.show()

#H. Print the test dataframe with the added columns “Quality” and “Predicted Quality”
testdataframe=X_test
testdataframe['Quality']=y_test
testdataframe['Predicted Quality']=y_pred
print(testdataframe)

#I. Print the accuracy of model on the test dataset.
print(metrics.accuracy_score(y_test, y_pred))
